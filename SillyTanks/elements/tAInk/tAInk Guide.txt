tAInk Guide
-----------

Overview:
---------

tAInk is a simple AI-controlled Tank game.  Each tank is manipulated only by its accompanying AI script, 
and never directly by a player.  The tank with the best written AI wins!

tAInk is full 3D (DirectX) and full Physics (ODE).   In order to make the tank move,
you have to set the speed of either the left or right tracks, allowing physics to take over
and drive the tank appropriately.

tAInk always has a rough network layer written, meaning you can play with your friends online!
AI Scripts can be uploaded by the players without shutting the game down.  Additionally, players
need not be logged on to play the game.  Simply log in, update your scripts, log off, and return back
later to see how your tank performed.

The game also features a sandbox mode where you can just pit your AI against the (rather dumb) default.
Simply write the scripts, and off you go.

Script:
-------

The AI is written using LUA.  Each script must have two functions defined:

   function BrainTick(messages)
   end
   
   function SandboxRender()
   end
   
"BrainTick" is called by the game in order to give the tank a chance to "think".
This is when and where you decide how your tank will behave, what to, and so on.
The "messages" table is sent to you with information about the game whenever appropriate.

The message table is structured as follows:

	messages.count	-- number of messages
	messages[0 to count].MessageType	-- Identifies the type of message, as a string
	messages[0 to count].<message data>	-- Message-specific data.
	messages[0 to count].<message data> -- ...
	
The message types, and their structures, are as follows:

	[Got Hit Message]
	
	message.MessageType == "GotHit"	-- Identifies a "Got Hit" message
	message.Source == tankID 		-- The tank who applied the hit
	message.Damage == damage		-- The amount of damage applied
	
	[Hit Target Message]
	
	message.MessageType == "HitTarget"	-- Identifies a "Hit Target" message
	message.Target == tankID			-- The tank that you hit
	message.Killed == 0 or 1			-- Whether or not you killed the tank
	
For example, if tank A shoots a projectile at tank B, and hits the tank for 50 points,
the "Got Hit" message will be sent to tank B, and the "Hit Target" message will be sent
to tank A.

You can also send messages to tanks from within the World script, as follows:

	SendTankMessage(tankID, {MessageType = "YourType", Foo = "Bar", SomeData = "Gra"})
	
See GameData/Worlds/Arena1/Arena1.lua for an example using crate drops.

"SandboxRender" is used to draw stuff on screen in Sandbox mode only.  Useful for
debugging and such.

For a full list of script functions, see the bottom of this file.

How do I host / join a game?
----------------------------

To host a game, simply click on the "HOST" button in the main menu.
Arena1 will be loaded, with all the tanks loaded as specified in /db/tanks.db.
The "tanks.db" file is simple - username first, followed by the path to script (relative
from the executable).  
Ex:

	Tank1 GameData/scripts/Taink/TankGeneric.lua
	Tank2 GameData/scripts/Taink/TankGeneric.lua
	
Whether in Sandbox or Hosting a game, tanks.db defines exactly the tanks that will 
be loaded when the game starts.  It is recommended to not futz with this file.

You can add dummy tanks in there, but if you want a tank to be user-controlled
you must name the tank the same name as a user, as defined in users.conf
The "users.conf" is structured as follows: Username Password Score
Ex:
	User1 tank1 175
	User2 tank2 182
	
When hosting a game, a "User1" can log in with password "tank1", and manipulate
the tank called "User1" (or upload one).

To create a new user, simply add new line to users.conf, with a starting score of
your choosing.  This is also the file you want to edit if you want to reset scores, 
change passwords, or reset scores.

Arena1 is provided as an example, with two tanks running and duking it out.  The important
files to look at are:

/GameData/Worlds/Arena1/Arena1.lua
/GameData/Scripts/Taink/TankGeneric.lua
/db/tanks.db
/db/users.conf

Script Functions:
-----------------

SetLeftTrackSpeed(speed)		
-- Set's the left track speed.  -1 to 1, where negative numbers indicate reverse.  
   Applies only to the player's tank.

SetRightTrackSpeed(speed)		
-- Set's the right track speed.  -1 to 1, where negative numbers indicate reverse.  
   Applies only to the player's tank.
   
GetLeftTrackSpeed()
-- Gets the tank left track speed.  Returns -1 to 1, where negative numbers indicate reverse.  
   Applies only to the player's tank.
   
GetRightTrackSpeed()
-- Gets the tank right track speed.  Returns -1 to 1, where negative numbers indicate reverse.  
   Applies only to the player's tank.

SetCannonAngle(angle)			
-- Set's the cannon's angle in radians, and the rotate speed (between 0 and 1).  Ex:  SetCannonAngle(math.pi/2, 1)
   Applies only to the player's tank.

FireWeapon(weapon)				
-- Fires the weapon.  0 = CANNON, 1 = MINE
   If CANNON (0) is specified, the tank will fire a projectile from the cannon at high speed.
   If MINE (1) is specified, the tank will drop a mine directly behind it.  Be careful to not drop mines
   while in reverse.   
   Applies only to the player's tank.
   
GetWeaponAmmo(weapon)
-- Retrieves the ammo count for the specified weapon.  0 = CANNON, 1 = MINE.
   Applies only to the player's tank.

GetTankCount()			
-- Gets the number of tanks in the game.  Use this function with GetTank(index) to retrieve tank IDs.

GetTank([optional] index)					
-- Returns the ID of a tank by index.  If no index is specified, returns the user's tank.  If the tank
   cannot be found (ex, index is invalid or player does not have an active tank), returns nil.

GetCannonDirection([optional] tankID)		
-- Gets the cannon direction of a particular tank.  Returns three values.  Ex:  dir = { GetCannonDirection(GetTank(0))}
   If no tankID is specified, defaults to the user's tank.  If the tank cannot be found, returns nil.

GetTankDirection([optional] tankID)		
-- Gets the facing direction of a particular tank.  Returns three values.  Ex:  dir = { GetTankDirection(GetTank(0))}
   If no tankID is specified, defaults to the user's tank.  If the tank cannot be found, returns nil.

GetTankPosition([optional] tankID)	
-- Gets the position of a particular tank.  Returns three values.  Ex:  pos = { GetTankPosition(GetTank(0))}
   If no tankID is specified, defaults to the user's tank.  If the tank cannot be found, returns nil.

GetTankName([optional] tankID)				
-- Gets the name of a particular tank.
   If no tankID is specified, defaults to the user's tank.  If the tank cannot be found, returns nil.

GetTankScore([optional] tankID)			
-- Gets the score of a particular tank
   If no tankID is specified, defaults to the user's tank.  If the tank cannot be found, returns nil.

-----------------------------------------------------------------
Under Sandbox Mode Only:
(Note:  These functions are disabled when playing online)
-----------------------------------------------------------------

DrawLine				
-- Draws a line in 3D Space.  Ex:
		DrawLine(0, 0, 0, 		--	Line Start
				 0, 0, 1)		--	Line End

print2d				
-- Prints text on screen.  Ex:
		print2d(50, 50, "This is some text.")